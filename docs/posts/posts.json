[
  {
    "path": "posts/2025-02-27-backpropagation/",
    "title": "Backpropagation",
    "description": "Backpropagation is very cool.",
    "author": [],
    "date": "2025-02-27",
    "categories": [],
    "contents": "\r\n← Back\r\nSomething about backpropagation.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2025-02-28T02:33:43-05:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Decoder-Only Transformers",
    "description": "A look into the architecture that powers most LLMs.",
    "author": [],
    "date": "2025-02-26",
    "categories": [],
    "contents": "\r\n← Back\r\nSelf-Attention\r\nAt the core of the transformer is the attention mechanism. For each input token \\(x_n\\), the attention mechanism aggregates information from surrounding tokens and produces a new representation \\(y_n\\). This is known as self-attention, because the input sequence attends to itself to create a new representation of the same sequence. The simplest way to compute this is to take a linear combination of all the input tokens,\r\n\\[\r\n  y_n=\\sum_{m}^N a_{nm} x_m\r\n\\]\r\nA token \\(x_m\\) that is closely related \\(x_n\\) should contribute a lot to the computation of \\(y_n\\). Conversely, tokens that have very little to do with \\(x_n\\) are unlikely to provide any interesting context. Intuitively then, \\(a_{nm}\\) should capture how similar the tokens \\(x_n\\) and \\(x_m\\) are. Tokens which are closely related should have a large \\(a_{nm}\\), while unrelated tokens should contribute close to nothing, i.e., \\(a_{nm} \\approx 0\\). This is easy to do with vectors - we can simply compute their dot product and normalize them so that no weight is negative. We also make sure they sum to a constant so they act as weights. The Softmax function satisfies both criteria,\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left(x_n^T x_m\\right)}{\\sum_m^N{\\exp\\left(x_n^T x_m\\right)}}.\r\n\\]\r\nThen, the final representation for \\(x_n\\) is computed as follows:\r\n\\[\r\n  y_n=\\sum_{m}^N a_{nm} x_m, \\quad \\text{where} \\ \\ a_{nm}\\geq0 \\ \\ \\text{and} \\ \\ \\sum a_{nm} = 1.\r\n\\]\r\nSo far, this attention mechanism has no learning capacity. We have to this point this far simply by reasoning how each input token can be better represented according to its similarity to other input tokens. However, the original representations \\(X\\) may not be optimal for determining the nuanced relationships between different tokens. We can afford this mechanism some flexibility by introducing a linear transformation \\(W^{(q)}\\) that will hopefully transform each token such that their dot product reveals more interesting relationships between them,\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left((W^{(q)}x_n)^T W^{(q)}x_m \\right)}{\\sum_m^N{\\exp\\left((W^{(q)}x_n)^T W^{(q)}x_m\\right)}} \\\\\r\n= \\frac{\\exp\\left( x_n^T W^{(q)T} W^{(q)} x_m \\right)}{\\sum_m^N{\\exp\\left(x_n^T W^{(q)T} W^{(q)} x_m\\right)}}.\r\n\\]\r\nThe entries of such a matrix are obviously unknown - they should be parameters learned from the data. But there’s a subtle problem with using the same matrix \\(Q\\) to transform both \\(x_n\\) and \\(x_m\\). The matrix product \\(W^{(q)T} W^{(q)}\\) is symmetric (because \\((W^{(q)T} W^{(q)})^T = W^{(q)T} W^{(q)}\\)), so \\(x_n^T W^{(q)T} W^{(q)} x_m = x_m^T W^{(q)T} W^{(q)} x_n\\) and therefore \\(a_{nm}=a_{mn}\\). This is not ideal, because the relationship between tokens is not necessarily symmetric. We can introduce another matrix \\(W^{(k)T} W^{(k)}\\) to project the all other tokens \\(x_m\\),\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left((W^{(q)}x_n)^T W^{(k)}x_m \\right)}{\\sum_m^N{\\exp\\left((W^{(q)}x_n)^T W^{(k)}x_m\\right)}}\r\n\\]\r\nThe matrix \\(W^{(q)}\\) is known as the query matrix, and \\(W^{(k)}\\) is known as the key matrix. One way to think about them is like this: the query matrix distills from the token \\(x_n\\) a question, or query, \\(q_n=W^{(q)}x_n\\) that this token can ask about the other tokens \\(x_m\\), while the key matrix distills an answer, or a key, \\(k_m=W^{(k)}x_m\\) from each of the remaining tokens \\(x_m\\). The inner product between these the query and key reveals which tokens \\(x_m\\) contain information relevant to building a richer representation for \\(x_n\\).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2025-02-28T14:55:44-05:00",
    "input_file": {}
  }
]
