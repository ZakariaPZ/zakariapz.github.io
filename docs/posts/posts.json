[
  {
    "path": "posts/2025-02-27-backpropagation/",
    "title": "Backpropagation",
    "description": {},
    "author": [],
    "date": "2025-02-27",
    "categories": [],
    "contents": "\r\n← Back\r\nComing soon…\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2025-03-02T17:40:58-05:00",
    "input_file": {}
  },
  {
    "path": "posts/decoders/",
    "title": "Decoder-Only Transformers",
    "description": "A look into the architecture that powers most LLMs.",
    "author": [],
    "date": "2025-02-26",
    "categories": [],
    "contents": "\r\n← Back\r\nNote: This blog is incomplete. I’m actively working on writing the remaining sections. For now, here’s a short section on self-attention.\r\nSelf-Attention\r\nAt the core of the transformer is the attention mechanism. For each input token \\(x_n\\), the attention mechanism aggregates information from surrounding tokens and produces a new representation \\(y_n\\). This is known as self-attention, because the input sequence attends to itself to create a new representation of the same sequence. The simplest way to compute this is to take a linear combination of all the input tokens,\r\n\\[\r\n  y_n=\\sum_{m}^N a_{nm} x_m\r\n\\]\r\nA token \\(x_m\\) that is closely related \\(x_n\\) should contribute a lot to the computation of \\(y_n\\). Conversely, tokens that have very little to do with \\(x_n\\) are unlikely to provide any interesting context. Intuitively then, \\(a_{nm}\\) should capture how similar the tokens \\(x_n\\) and \\(x_m\\) are. Tokens which are closely related should have a large \\(a_{nm}\\), while unrelated tokens should contribute close to nothing, i.e., \\(a_{nm} \\approx 0\\). This is easy to do with vectors - we can simply compute their dot product and normalize them so that no weight is negative. We also make sure they sum to a constant so they act as weights. The Softmax function satisfies both criteria,\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left(x_n^T x_m\\right)}{\\sum_m^N{\\exp\\left(x_n^T x_m\\right)}}.\r\n\\]\r\nThen, the final representation for \\(x_n\\) is computed as follows:\r\n\\[\r\n  y_n=\\sum_{m}^N a_{nm} x_m, \\quad \\text{where} \\ \\ a_{nm}\\geq0 \\ \\ \\text{and} \\ \\ \\sum a_{nm} = 1.\r\n\\]\r\nSo far, this attention mechanism has no learning capacity. We have gotten to this point simply by reasoning about how each input token can be better represented according to its similarity to other input tokens. However, the original representations \\(X\\) may not be optimal for determining the nuanced relationships between different tokens. We can afford this mechanism some flexibility by introducing a linear transformation \\(W^{(q)} \\in \\mathbb{R}^{D\\times D_q}\\) that will hopefully transform each token such that their dot product reveals more interesting relationships between them,\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left((W^{(q)}x_n)^T W^{(q)}x_m \\right)}{\\sum_m^N{\\exp\\left((W^{(q)}x_n)^T W^{(q)}x_m\\right)}} \\\\\r\n= \\frac{\\exp\\left( x_n^T W^{(q)T} W^{(q)} x_m \\right)}{\\sum_m^N{\\exp\\left(x_n^T W^{(q)T} W^{(q)} x_m\\right)}}.\r\n\\]\r\nThe entries of such a matrix are obviously unknown - they should be parameters learned from the data. But there’s a subtle problem with using the same matrix \\(W^{(q)}\\) to transform both \\(x_n\\) and \\(x_m\\). The matrix product \\(W^{(q)T} W^{(q)}\\) is symmetric, so\r\n\\[\r\n  x_n^T W^{(q)T} W^{(q)} x_m = x_m^T W^{(q)T} W^{(q)} x_n,\r\n\\]\r\nand therefore \\(a_{nm}=a_{mn}\\). This is not ideal, because the relationship between tokens is not necessarily symmetric. We can introduce another matrix \\(W^{(k)} \\in \\mathbb{R}^{D\\times D_k}\\) to project all other tokens \\(x_m\\),\r\n\\[\r\n  a_{nm} = \\frac{\\exp\\left((W^{(q)}x_n)^T W^{(k)}x_m \\right)}{\\sum_m^N{\\exp\\left((W^{(q)}x_n)^T W^{(k)}x_m\\right)}}\r\n\\]\r\nThe matrix \\(W^{(q)}\\) is known as the query matrix, and \\(W^{(k)}\\) is known as the key matrix. One way to think about them is like this: the query matrix distills from the token \\(x_n\\) a question, or query, \\(q_n=W^{(q)}x_n\\) that this token can ask about the other tokens \\(x_m\\), while the key matrix distills an answer, or a key, \\(k_m=W^{(k)}x_m\\) from each of the remaining tokens \\(x_m\\). The inner product between these the query and key reveals which tokens \\(x_m\\) contain information relevant to building a richer representation for \\(x_n\\).\r\nIn practice, these projections are computed in parallel as the matrix products \\(Q = XW^{(q)}\\) and \\(K = XW^{(k)}\\). We can express the attention mechanism so that it computes all the attention weights at once using matrices, rather than obtaining the weights \\(a_{nm}\\) for each query-key pair individually. This is how it would be implemented, after all, as it takes advantage of the parallelism of a GPU.\r\nMultiplying \\(X\\in\\mathbb{R}^{N\\times D}\\) and \\(W^{(q)}\\in\\mathbb{R}^{D\\times D_q}\\) produces the matrix \\(Q\\in\\mathbb{R}^{N\\times D_q}\\). Every token \\(\\mathbf{x}_i\\) (i.e., every row in \\(X\\)) is transformed into a new vector \\(\\mathbf{q}_n\\) of length \\(D_q\\). We can view this transformation as taking a linear combination of the rows of \\(W^{(q)}\\), where each entry \\(\\{x_1, x_2, \\dots, x_D\\}\\) are the coefficients.Now we have a matrix \\(Q\\), of dimensions \\(N \\times D_q\\), containing the “queries” that each of the \\(N\\) tokens would like to ask every other token, and the matrix \\(K\\), of dimensions \\(N \\times D_k\\), containing the “key” or “answer” to each of these queries. Notice that there is no communcation between tokens yet - each token was indepedently transformed into a query and a key. We want to multiply the query and key matricest together to end up with an \\(N \\times N\\) matrix (the first \\(N\\) representing the sequence of queries along the row dimension, and the second \\(N\\) representing the sequence of keys along the column dimension) whose \\(nm\\)th entry that tells us how closely related the \\(n\\)th query is to the \\(m\\)th key. To do this, we choose \\(D_k = D_q\\), and then compute \\(QK^T\\).\r\n\r\nThe values in row \\(n\\) of \\(QK^T\\) correspond to how closely associated a query \\(q_n\\) is to the each of the keys \\(k_m\\). As before, these values are normalized using a row-wise Softmax so that they are non-negative and sum to one:\r\n\\[\r\n  A = \\text{Softmax}\\left(\\frac{QK^T}{\\sqrt{D_q}}\\right).\r\n\\]\r\nThe scaling factor \\(\\sqrt{D_q}\\) is the standard deviation of the dot product between the query and key vectors (as each element in these vectors is assumed to come from a normal distribution with unit variance). Dividing by this scaling factor prevents the Softmax distribution from becoming too sharp.\r\nThe resulting matrix \\(A\\) is the attention matrix containing the attention weights \\(a_{nm}\\). To obtain the new representation \\(Y\\), we can use these weights to take linear combinations of the input tokens, \\(Y=AX\\). However, as before, rather than using the input tokens directly, we can allow the neural network some flexibility by introducing another weight matrix, \\(W^{(v)}\\), and linearly transform the input tokens to a more suitable representation, \\(V=XW^{(v)}\\). The matrix \\(V\\) surfaces the relevant information, or values, from each input token, which are then combined via the attention weights. For this reason, \\(W^{(v)}\\) is known as the value matrix.\r\n\r\nAt this point, the tokens are finally communicating with one another. The resulting row vectors in \\(Y\\) are new representations of the input tokens \\(X\\), with each row vector \\(y_n\\) being an aggregate of all tokens, weighted by the attention weights. If \\(a_{nm}\\) is small, the \\(m^{\\text{th}}\\) token contributes little to \\(y_n\\); if large, it plays a significant role.\r\nMulti-Head Attention\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2025-03-02T19:53:12-05:00",
    "input_file": {}
  }
]
